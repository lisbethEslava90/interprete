/* The following code was generated by JFlex 1.4.1 on 11/10/11 15:09 */

import java.io.*;
import java.lang.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/10/11 15:09 from the specification file
 * <tt>src/flex/lexico.flex</tt>
 */
class lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    19,  0,  0,  0,  0,  0,  0, 33, 30, 31, 25, 23,  0, 24,  0, 26, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 27, 29, 28,  0, 
     0, 22,  7,  9,  4,  2,  8, 21, 18, 11,  0,  0, 16, 20,  3, 12, 
    13,  0, 14,  5, 10,  6,  0, 17, 15,  0,  0,  0,  0,  0, 32,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\5\0\1\15"+
    "\11\0\1\16\1\0\1\17\1\20\7\0\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\2\0\1\30"+
    "\5\0\1\31\1\32\3\0\1\33\4\0\1\34\1\35"+
    "\1\0\1\36\1\37\12\0\1\40\1\41\1\42\10\0"+
    "\1\43\2\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\1\54\4\0\1\55\1\0\1\56"+
    "\2\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0264\0\u0264\0\u0264\0\u0286\0\u02a8"+
    "\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\u0462\0\u0484\0\u04a6\0\u0264\0\u04c8\0\u0264\0\u0264"+
    "\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u0264"+
    "\0\u0264\0\u0264\0\u0264\0\u05d8\0\u05fa\0\u061c\0\u0264\0\u0264"+
    "\0\u063e\0\u0660\0\u0264\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u0264\0\u0264\0\u072c\0\u074e\0\u0770\0\u0264\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u0264\0\u0264\0\u081a\0\u083c\0\u0264\0\u085e"+
    "\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e"+
    "\0\u0990\0\u0264\0\u0264\0\u0264\0\u09b2\0\u09d4\0\u09f6\0\u0a18"+
    "\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0264\0\u0ac2\0\u0ae4\0\u0264"+
    "\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264\0\u0b06\0\u0264\0\u0264"+
    "\0\u0264\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0264\0\u0bb0\0\u0264"+
    "\0\u0bd2\0\u0bf4\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\0"+
    "\1\17\1\20\2\0\1\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\2\43\0\1\36\14\0\1\37\23\0"+
    "\1\40\11\0\1\41\40\0\1\42\1\43\27\0\1\44"+
    "\3\0\1\45\3\0\1\46\1\47\6\0\1\50\22\0"+
    "\1\51\44\0\1\52\5\0\1\53\45\0\1\54\35\0"+
    "\1\55\30\0\1\56\4\0\1\57\47\0\1\60\41\0"+
    "\1\61\25\0\1\62\53\0\1\63\27\0\1\64\17\0"+
    "\1\65\33\0\1\66\30\0\1\67\1\0\1\70\132\0"+
    "\1\71\1\72\41\0\1\73\10\0\1\74\42\0\1\75"+
    "\53\0\1\76\34\0\1\77\53\0\1\100\23\0\1\101"+
    "\53\0\1\102\30\0\1\103\50\0\1\104\26\0\1\105"+
    "\64\0\1\106\25\0\1\107\32\0\1\110\54\0\1\111"+
    "\30\0\1\112\46\0\1\113\2\0\1\114\37\0\1\115"+
    "\52\0\1\116\20\0\1\117\10\0\1\120\30\0\1\121"+
    "\51\0\1\122\32\0\1\123\41\0\1\124\60\0\1\125"+
    "\20\0\1\126\51\0\1\127\36\0\1\130\34\0\1\131"+
    "\52\0\1\132\53\0\1\133\32\0\1\134\36\0\1\135"+
    "\37\0\1\136\32\0\1\137\45\0\1\140\36\0\1\141"+
    "\63\0\1\142\31\0\1\143\30\0\1\144\55\0\1\145"+
    "\34\0\1\146\41\0\1\147\46\0\1\150\32\0\1\151"+
    "\33\0\1\152\56\0\1\153\23\0\1\154\57\0\1\155"+
    "\33\0\1\156\54\0\1\157\26\0\1\160\41\0\1\161"+
    "\31\0\1\162\47\0\1\163\41\0\1\164\33\0\1\165"+
    "\51\0\1\166\54\0\1\167\16\0\1\170\43\0\1\171"+
    "\50\0\1\172\30\0\1\173\62\0\1\174\32\0\1\175"+
    "\43\0\1\176\34\0\1\177\33\0\1\200\64\0\1\201"+
    "\20\0\1\202\36\0\1\203\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\20\0\4\11\2\1\5\11\5\0\1\1"+
    "\11\0\1\11\1\0\2\11\7\0\4\11\1\1\2\0"+
    "\2\11\2\0\1\11\5\0\2\11\3\0\1\11\4\0"+
    "\2\11\1\0\1\1\1\11\12\0\3\11\10\0\1\11"+
    "\2\0\6\11\1\0\3\11\4\0\1\11\1\0\1\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	static FileInputStream FInStr = null;
	static String fInName ; //nombre archivo entrada


	public static void main (String argv[])
	throws java.io.IOException {
                argv = new String[]{"entrada.txt"};
		int numparams = argv.length; //n�mero argumentos pasados

		//Obtenci�n de par�metros pasados en l�nea de comandos
		if ( numparams != 1) 
		{ 	//error: nr. Par�metros incorrecto
			System.out.println ("N�mero par�metros incorrecto!. Uso: ");
			System.out.println ( "\tjava lexico archivo.EXT");
			return; 
		}
		else 
		{ 	fInName = argv[0];		
			lexico yy = new lexico(new FileInputStream(fInName));
			while (yy.yylex() != -1) ; 
		}

	} //Final main


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexico(java.io.Reader in) throws 	FileNotFoundException
 {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexico(java.io.InputStream in) throws 	FileNotFoundException
 {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { System.out.print("token ELSE\n");
          }
        case 48: break;
        case 5: 
          { System.out.print("token DIVIDE\n");
          }
        case 49: break;
        case 31: 
          { System.out.print("token NEXT\n");
          }
        case 50: break;
        case 15: 
          { System.out.print("token IF\n");
          }
        case 51: break;
        case 46: 
          { System.out.print("token FUNC\n");
          }
        case 52: break;
        case 11: 
          { System.out.print("token CIRCUN\n");
          }
        case 53: break;
        case 44: 
          { System.out.print("token SHA\n");
          }
        case 54: break;
        case 4: 
          { System.out.print("token MULTIPLICA\n");
          }
        case 55: break;
        case 23: 
          { System.out.print("token DIM\n");
          }
        case 56: break;
        case 8: 
          { System.out.print("token IGUAL\n");
          }
        case 57: break;
        case 45: 
          { System.out.print("token INT\n");
          }
        case 58: break;
        case 26: 
          { System.out.print("token CLS\n");
          }
        case 59: break;
        case 39: 
          { System.out.print("token END IF\n");
          }
        case 60: break;
        case 20: 
          { System.out.print("token MAYORI\n");
          }
        case 61: break;
        case 40: 
          { System.out.print("token ELSIF\n");
          }
        case 62: break;
        case 28: 
          { System.out.print("token MOD\n");
          }
        case 63: break;
        case 32: 
          { System.out.print("token LONG\n");
          }
        case 64: break;
        case 27: 
          { System.out.print("token REM\n");
          }
        case 65: break;
        case 16: 
          { System.out.print("token OR\n");
          }
        case 66: break;
        case 29: 
          { System.out.print("token AND\n");
          }
        case 67: break;
        case 41: 
          { System.out.print("token DOU\n");
          }
        case 68: break;
        case 19: 
          { System.out.print("token MENORI\n");
          }
        case 69: break;
        case 47: 
          { System.out.print("token SELC\n");
          }
        case 70: break;
        case 3: 
          { System.out.print("token RESTA\n");
          }
        case 71: break;
        case 37: 
          { System.out.print("token PRINT\n");
          }
        case 72: break;
        case 9: 
          { System.out.print("token PARENA\n");
          }
        case 73: break;
        case 22: 
          { System.out.print("token NOT\n");
          }
        case 74: break;
        case 35: 
          { System.out.print("token UNTIL\n");
          }
        case 75: break;
        case 10: 
          { System.out.print("token PARENC\n");
          }
        case 76: break;
        case 2: 
          { System.out.print("token SUMA\n");
          }
        case 77: break;
        case 21: 
          { System.out.print("token END\n");
          }
        case 78: break;
        case 34: 
          { System.out.print("token WEND\n");
          }
        case 79: break;
        case 24: 
          { System.out.print("token SUB\n");
          }
        case 80: break;
        case 13: 
          { System.out.print("token DO\n");
          }
        case 81: break;
        case 14: 
          { System.out.print("token TO\n");
          }
        case 82: break;
        case 6: 
          { System.out.print("token MENOR\n");
          }
        case 83: break;
        case 17: 
          { System.out.print("token AS\n");
          }
        case 84: break;
        case 12: 
          { System.out.print("token COMILLA\n");
          }
        case 85: break;
        case 18: 
          { System.out.print("token DIFERENTE\n");
          }
        case 86: break;
        case 43: 
          { System.out.print("token SIN\n");
          }
        case 87: break;
        case 7: 
          { System.out.print("token MAYOR\n");
          }
        case 88: break;
        case 25: 
          { System.out.print("token FOR\n");
          }
        case 89: break;
        case 33: 
          { System.out.print("token LOOP\n");
          }
        case 90: break;
        case 42: 
          { System.out.print("token STR\n");
          }
        case 91: break;
        case 36: 
          { System.out.print("token INPUT\n");
          }
        case 92: break;
        case 38: 
          { System.out.print("token WHILE\n");
          }
        case 93: break;
        case 1: 
          { 
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
