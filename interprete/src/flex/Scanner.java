/* The following code was generated by JFlex 1.4.1 on 15/10/11 08:18 PM */

package flex;

import java_cup.runtime.SymbolFactory;
import java.io.FileInputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15/10/11 08:18 PM from the specification file
 * <tt>src/flex/lexico.flex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  2,  4, 47,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0, 45, 44, 43, 42,  0, 10, 19,  9, 14, 12, 37, 13, 41, 15, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 38, 34, 11, 35,  0, 
     0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  0,  0,  0, 16,  0, 
     0, 33, 22, 25, 18,  7, 23, 36, 31, 27, 39, 39, 32,  8, 24, 17, 
    28, 39,  6, 20, 26, 21, 39, 30, 29, 39, 39,  0, 40,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\3\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\5\1\16"+
    "\14\5\1\17\1\20\1\21\1\22\1\1\1\23\1\4"+
    "\1\5\1\24\1\23\1\0\1\23\2\5\1\25\1\26"+
    "\1\27\3\5\1\30\1\31\1\32\11\5\1\33\1\5"+
    "\1\34\7\5\1\35\1\36\1\37\1\0\1\40\1\23"+
    "\1\5\1\41\1\42\1\5\1\43\1\44\1\45\2\5"+
    "\1\46\2\5\1\47\1\50\6\5\1\0\1\51\1\52"+
    "\1\5\1\53\1\54\2\5\1\55\1\56\2\5\1\57"+
    "\1\5\1\60\3\0\1\61\1\5\1\62\1\5\1\63"+
    "\1\64\1\65\3\0\1\66\1\5\3\0\1\5\3\0"+
    "\1\67\3\0\1\70\1\71\1\0\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\140\0\360"+
    "\0\u0120\0\u0150\0\140\0\u0180\0\u01b0\0\140\0\140\0\140"+
    "\0\140\0\140\0\u01e0\0\u0210\0\140\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\140\0\140\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\140\0\300\0\u05d0\0\u0600\0\u0630\0\140"+
    "\0\140\0\140\0\u0660\0\u0690\0\u06c0\0\140\0\u02a0\0\u02a0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u02a0\0\u08a0\0\u02a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\140\0\140\0\140\0\u04e0\0\140"+
    "\0\140\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u02a0\0\u02a0\0\u02a0"+
    "\0\u0ae0\0\u0b10\0\u02a0\0\u0b40\0\u0b70\0\u02a0\0\u02a0\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u02a0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u02a0\0\u0d80\0\u0db0\0\u02a0\0\u02a0\0\u0de0"+
    "\0\u0e10\0\u02a0\0\u0e40\0\u02a0\0\u0e70\0\u0ea0\0\u0ed0\0\u02a0"+
    "\0\u0f00\0\u02a0\0\u0f30\0\u02a0\0\u02a0\0\u02a0\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u02a0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u02a0\0\u1170\0\u11a0\0\u11d0\0\140\0\140"+
    "\0\u1200\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\30\1\37\1\30"+
    "\1\40\1\41\1\42\1\43\1\30\1\44\1\45\1\30"+
    "\5\3\1\46\2\7\1\3\1\4\1\5\1\47\1\3"+
    "\1\50\1\51\1\11\1\12\1\13\1\52\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\30\1\37\1\30\1\40\1\41\1\42\1\43\1\30"+
    "\1\44\1\45\1\30\5\3\1\46\2\7\61\0\1\4"+
    "\60\0\1\53\1\54\1\53\1\55\51\0\1\53\1\0"+
    "\1\30\4\0\1\30\1\56\1\30\10\0\2\30\1\0"+
    "\16\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\3\30\10\0\2\30\1\0"+
    "\4\30\1\63\7\30\1\64\1\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\1\65\1\30\1\0\16\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\3\0\2\14"+
    "\1\0\6\14\1\0\11\14\1\0\34\14\13\0\1\66"+
    "\45\0\1\30\4\0\1\67\2\30\10\0\2\30\1\0"+
    "\16\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\3\30\10\0\1\70\1\30"+
    "\1\0\7\30\1\71\6\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\4\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\1\30\1\72\4\30\1\73\7\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\3\30\10\0\2\30\1\0\4\30"+
    "\1\74\11\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\2\30"+
    "\1\0\16\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\1\75"+
    "\1\30\1\0\1\30\1\76\14\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\1\30\1\77\1\30\10\0\1\100\1\30\1\0\16\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\3\30\10\0\2\30\1\0\14\30"+
    "\1\101\1\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\1\102"+
    "\1\30\1\0\13\30\1\103\2\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\2\30\1\0\3\30\1\104\1\105\11\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\1\106\2\30\10\0\2\30\1\0"+
    "\16\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\1\30\1\107\1\30\10\0"+
    "\2\30\1\0\13\30\1\110\2\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\1\111\1\30\1\0\16\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\3\30\10\0\2\30\1\0\1\112\3\30\1\113"+
    "\11\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\16\0\1\114\27\0\1\115\27\0\1\116\44\0"+
    "\2\117\1\0\2\117\1\0\3\117\1\0\11\117\1\0"+
    "\24\117\1\0\4\117\1\120\2\117\2\0\1\53\1\47"+
    "\1\53\1\55\51\0\1\53\2\0\1\121\56\0\1\30"+
    "\4\0\1\30\1\122\1\30\10\0\2\30\1\0\16\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\3\0\2\52\1\0\6\52\1\0\11\52\1\0\34\52"+
    "\2\0\1\53\56\0\1\30\4\0\2\30\1\123\10\0"+
    "\2\30\1\0\16\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\57\4\0\3\57\10\0"+
    "\2\57\1\0\16\57\2\0\1\57\2\0\2\57\1\0"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\3\30\10\0"+
    "\1\30\1\124\1\0\16\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\4\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\1\125\15\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\1\30\1\126\1\0\16\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\2\30\1\127\10\0\2\30\1\0\16\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\2\30\1\0\2\30\1\130"+
    "\13\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\1\30\1\131\1\30\10\0"+
    "\2\30\1\0\16\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\3\30\10\0"+
    "\2\30\1\0\6\30\1\132\7\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\1\133\2\30\10\0\2\30\1\0\16\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\3\30\10\0\2\30\1\0\4\30\1\134\11\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\3\30\10\0\2\30\1\0\11\30"+
    "\1\135\4\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\2\30"+
    "\1\0\6\30\1\136\7\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\4\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\1\137\15\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\1\30\1\140\1\30\10\0\2\30\1\0\16\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\2\30\1\0\10\30\1\141"+
    "\5\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\3\30\10\0\2\30\1\0"+
    "\7\30\1\142\6\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\3\30\10\0"+
    "\2\30\1\0\4\30\1\143\11\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\2\30\1\0\7\30\1\144\6\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\1\145\1\30\1\0\16\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\1\0\1\146\2\0\3\30\10\0\2\30"+
    "\1\0\16\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\1\30"+
    "\1\147\1\0\16\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\2\30\1\150"+
    "\10\0\2\30\1\0\16\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\3\0\2\123\1\0\6\123"+
    "\1\0\11\123\1\0\34\123\1\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\7\30\1\151\6\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\1\30\1\152\1\30\10\0\2\30\1\0\16\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\3\30\10\0\2\30\1\0\10\30"+
    "\1\153\5\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\2\30"+
    "\1\0\7\30\1\154\6\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\4\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\5\30\1\155\10\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\3\30\10\0\2\30\1\0\6\30\1\156\7\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\4\0\1\30\4\0\3\30\10\0\2\30\1\0\4\30"+
    "\1\157\11\30\2\0\1\30\2\0\2\30\1\57\1\60"+
    "\1\61\1\62\4\0\1\30\4\0\3\30\10\0\2\30"+
    "\1\0\1\30\1\160\14\30\2\0\1\30\2\0\2\30"+
    "\1\57\1\60\1\61\1\62\4\0\1\30\4\0\3\30"+
    "\10\0\2\30\1\0\4\30\1\161\11\30\2\0\1\30"+
    "\2\0\2\30\1\57\1\60\1\61\1\62\4\0\1\30"+
    "\4\0\3\30\10\0\1\30\1\162\1\0\16\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\2\30\1\0\14\30\1\163"+
    "\1\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\3\30\10\0\2\30\1\0"+
    "\10\30\1\164\5\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\25\0\1\165\1\0\1\166\6\0"+
    "\1\167\24\0\2\150\1\0\6\150\1\0\11\150\1\0"+
    "\34\150\1\0\1\30\4\0\3\30\10\0\2\30\1\0"+
    "\3\30\1\170\12\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\3\30\10\0"+
    "\2\30\1\0\7\30\1\171\6\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\3\30\10\0\2\30\1\0\14\30\1\172\1\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\2\30\1\0\6\30\1\173"+
    "\7\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\4\0\1\30\4\0\3\30\10\0\2\30\1\0"+
    "\6\30\1\174\7\30\2\0\1\30\2\0\2\30\1\57"+
    "\1\60\1\61\1\62\4\0\1\30\4\0\3\30\10\0"+
    "\2\30\1\0\6\30\1\175\7\30\2\0\1\30\2\0"+
    "\2\30\1\57\1\60\1\61\1\62\4\0\1\30\4\0"+
    "\1\30\1\176\1\30\10\0\2\30\1\0\16\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\24\0"+
    "\1\177\70\0\1\200\55\0\1\201\30\0\1\30\4\0"+
    "\3\30\10\0\2\30\1\0\3\30\1\202\12\30\2\0"+
    "\1\30\2\0\2\30\1\57\1\60\1\61\1\62\4\0"+
    "\1\30\4\0\3\30\10\0\2\30\1\0\7\30\1\203"+
    "\6\30\2\0\1\30\2\0\2\30\1\57\1\60\1\61"+
    "\1\62\30\0\1\204\40\0\1\205\103\0\1\206\26\0"+
    "\1\30\4\0\3\30\10\0\1\207\1\30\1\0\16\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\31\0\1\210\64\0\1\211\33\0\1\212\51\0\1\30"+
    "\4\0\3\30\10\0\2\30\1\0\4\30\1\213\11\30"+
    "\2\0\1\30\2\0\2\30\1\57\1\60\1\61\1\62"+
    "\43\0\1\214\47\0\1\215\73\0\1\216\22\0\1\217"+
    "\114\0\1\220\22\0\1\221\56\0\1\222\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4656];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\3\1\11\3\1\1\11"+
    "\2\1\5\11\2\1\1\11\16\1\2\11\1\1\1\3"+
    "\3\1\1\15\1\2\1\5\2\1\3\11\3\1\1\11"+
    "\25\1\3\11\1\0\2\11\24\1\1\0\16\1\3\0"+
    "\7\1\3\0\2\1\3\0\1\1\3\0\1\1\3\0"+
    "\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	private int lineanum;
	private boolean debug=true;

	static FileInputStream FInStr = null;
	static String fInName ; //nombre archivo entrada

	public static void main(String argv[]) 
	throws java.io.IOException {
		int numparams = argv.length; //número argumentos pasados
		if ( numparams != 1) 
		{ 	//error: nr. Parámetros incorrecto
			System.out.println ("Número parámetros incorrecto!. Uso: ");
			System.out.println ( "\tjava yylex archivo.EXT");
			return; 
		}
		else 
		{ 	
			fInName = argv[0];		
			Yylex yy = new Yylex(new FileInputStream(fInName));
			while (yy.yylex() != -1) ; 
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { if(debug) System.out.println("token ID");
                                        	return sf.newSymbol("ID",sym.ID,yytext());
          }
        case 59: break;
        case 16: 
          { if(debug) System.out.println("token RT");
			return sf.newSymbol("RT",sym.RT);
          }
        case 60: break;
        case 47: 
          { if(debug) System.out.println("token WEND");
			return sf.newSymbol("WEND",sym.WEND);
          }
        case 61: break;
        case 33: 
          { if(debug) System.out.println("token REM en cualquier parte");
                return sf.newSymbol("SALTO DE LINEA",sym.FL);
          }
        case 62: break;
        case 37: 
          { if(debug) System.out.println("token SUB");
			return sf.newSymbol("SUB",sym.SUB);
          }
        case 63: break;
        case 32: 
          { if(debug) System.out.println("token COMILLAS");
                    	return sf.newSymbol("COMILLAS",sym.COMILLAS,yytext());
          }
        case 64: break;
        case 22: 
          { if(debug) System.out.println("token STRD");
                                        	return sf.newSymbol("STRD",sym.STRD,yytext());
          }
        case 65: break;
        case 35: 
          { if(debug) System.out.println("token MOD");
			return sf.newSymbol("MOD",sym.MOD);
          }
        case 66: break;
        case 27: 
          { if(debug) System.out.println("token TO");
			return sf.newSymbol("TO",sym.TO);
          }
        case 67: break;
        case 40: 
          { if(debug) System.out.println("token CLS");
			return sf.newSymbol("CLS",sym.CLS);
          }
        case 68: break;
        case 15: 
          { if(debug) System.out.println("token LT");
			return sf.newSymbol("LT",sym.LT);
          }
        case 69: break;
        case 54: 
          { if(debug) System.out.println("token ELSEIF");
			return sf.newSymbol("ELSEIF",sym.ELSEIF);
          }
        case 70: break;
        case 10: 
          { if(debug) System.out.println("token MINUS");
			return sf.newSymbol("MINUS",sym.MINUS);
          }
        case 71: break;
        case 6: 
          { if(debug) System.out.println("token RPAREN");
			return sf.newSymbol("RPAREN",sym.RPAREN);
          }
        case 72: break;
        case 12: 
          { if(debug) System.out.println("token OVER");
			return sf.newSymbol("OVER",sym.OVER);
          }
        case 73: break;
        case 39: 
          { if(debug) System.out.println("token NOT");
			return sf.newSymbol("NOT",sym.NOT);
          }
        case 74: break;
        case 11: 
          { if(debug) System.out.println("token TIMES");
			return sf.newSymbol("TIMES",sym.TIMES);
          }
        case 75: break;
        case 3: 
          { if(debug) System.out.println("token FL");
				return sf.newSymbol("FL",sym.FL);
          }
        case 76: break;
        case 55: 
          { if(debug) System.out.println("token FUNC");
			return sf.newSymbol("FUNC",sym.FUNC);
          }
        case 77: break;
        case 4: 
          { /* Ignorar Espacios en Blanco. */
          }
        case 78: break;
        case 20: 
          { if(debug) System.out.println("token COMENTARIO");
          }
        case 79: break;
        case 24: 
          { if(debug) System.out.println("token COM");
			return sf.newSymbol("COM",sym.COM);
          }
        case 80: break;
        case 25: 
          { if(debug) System.out.println("token OR");
			return sf.newSymbol("OR",sym.OR);
          }
        case 81: break;
        case 7: 
          { if(debug) System.out.println("token COMENTARIO");
                return sf.newSymbol("SALTO DE LINEA",sym.FL);
          }
        case 82: break;
        case 1: 
          { System.err.println("Caracter Ilegal encontrado en analisis lexico: " + yytext() + "\n");
          }
        case 83: break;
        case 36: 
          { if(debug) System.out.println("token DIM");
			return sf.newSymbol("DIM",sym.DIM);
          }
        case 84: break;
        case 41: 
          { if(debug) System.out.println("token AND");
			return sf.newSymbol("AND",sym.AND);
          }
        case 85: break;
        case 23: 
          { if(debug) System.out.println("token DOUN");
                                        	return sf.newSymbol("DOUN",sym.DOUN,yytext());
          }
        case 86: break;
        case 51: 
          { if(debug) System.out.println("token INPUT");
			return sf.newSymbol("INPUT",sym.INPUT);
          }
        case 87: break;
        case 56: 
          { if(debug) System.out.println("token AS DOUBLE");
                        return sf.newSymbol("ASD",sym.ASD);
          }
        case 88: break;
        case 31: 
          { if(debug) System.out.println("token RTE");
			return sf.newSymbol("RTE",sym.RTE);
          }
        case 89: break;
        case 45: 
          { if(debug) System.out.println("token NEXT");
			return sf.newSymbol("NEXT",sym.NEXT);
          }
        case 90: break;
        case 43: 
          { if(debug) System.out.println("token ELSE");
			return sf.newSymbol("ELSE",sym.ELSE);
          }
        case 91: break;
        case 34: 
          { if(debug) System.out.println("token END");
			return sf.newSymbol("END",sym.END);
          }
        case 92: break;
        case 21: 
          { if(debug) System.out.println("token NUMP");
                                        	return sf.newSymbol("NUMP",sym.NUMP,yytext());
          }
        case 93: break;
        case 44: 
          { if(debug) System.out.println("token STEP");
			return sf.newSymbol("STEP",sym.STEP);
          }
        case 94: break;
        case 9: 
          { if(debug) System.out.println("token PLUS");
			return sf.newSymbol("PLUS",sym.PLUS);
          }
        case 95: break;
        case 8: 
          { if(debug) System.out.println("token ASSIGN");
			return sf.newSymbol("ASSIGN",sym.ASSIGN);
          }
        case 96: break;
        case 57: 
          { if(debug) System.out.println("token AS STRING");
                        return sf.newSymbol("ASS",sym.ASS);
          }
        case 97: break;
        case 38: 
          { if(debug) System.out.println("token FOR");
			return sf.newSymbol("FOR",sym.FOR);
          }
        case 98: break;
        case 13: 
          { if(debug) System.out.println("token CIR");
			return sf.newSymbol("CIR",sym.CIR);
          }
        case 99: break;
        case 2: 
          { if(debug) System.out.println("token NUM");
			return sf.newSymbol("NUM",sym.NUM,new Integer(yytext()));
          }
        case 100: break;
        case 42: 
          { if(debug) System.out.println("token REM principio de linea");
          }
        case 101: break;
        case 17: 
          { if(debug) System.out.println("token COMA");
			return sf.newSymbol("COMA",sym.COMA);
          }
        case 102: break;
        case 52: 
          { if(debug) System.out.println("token PRINT");
			return sf.newSymbol("PRINT",sym.PRINT);
          }
        case 103: break;
        case 50: 
          { if(debug) System.out.println("token UNTIL");
			return sf.newSymbol("UNTIL",sym.UNTIL);
          }
        case 104: break;
        case 18: 
          { if(debug) System.out.println("token SEMI");
			return sf.newSymbol("SEMI",sym.SEMI);
          }
        case 105: break;
        case 53: 
          { if(debug) System.out.println("token WHILE");
			return sf.newSymbol("WHILE",sym.WHILE);
          }
        case 106: break;
        case 48: 
          { if(debug) System.out.println("token LOOP");
			return sf.newSymbol("LOOP",sym.LOOP);
          }
        case 107: break;
        case 29: 
          { if(debug) System.out.println("token LTE");
			return sf.newSymbol("LTE",sym.LTE);
          }
        case 108: break;
        case 28: 
          { if(debug) System.out.println("token IF");
			return sf.newSymbol("IF",sym.IF);
          }
        case 109: break;
        case 26: 
          { if(debug) System.out.println("token DO");
			return sf.newSymbol("DO",sym.DO);
          }
        case 110: break;
        case 49: 
          { if(debug) System.out.println("token ENDIF");
			return sf.newSymbol("ENDIF",sym.ENDIF);
          }
        case 111: break;
        case 14: 
          { if(debug) System.out.println("token LPAREN");
			return sf.newSymbol("LPAREN",sym.LPAREN);
          }
        case 112: break;
        case 46: 
          { if(debug) System.out.println("token THEN");
			return sf.newSymbol("THEN",sym.THEN);
          }
        case 113: break;
        case 58: 
          { if(debug) System.out.println("token AS INTEGER");
                        return sf.newSymbol("ASI",sym.ASI);
          }
        case 114: break;
        case 30: 
          { if(debug) System.out.println("token DIF");
			return sf.newSymbol("DIF",sym.DIF);
          }
        case 115: break;
        case 19: 
          { 
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sym.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
