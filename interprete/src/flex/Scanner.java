/* The following code was generated by JFlex 1.4.1 on 13/10/11 11:00 AM */

package flex;

import java_cup.runtime.SymbolFactory;
import java.io.FileInputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 13/10/11 11:00 AM from the specification file
 * <tt>src/flex/lexico.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  3,  0,  0, 46,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0, 45,  0,  0, 44,  0, 29, 34, 35, 32, 30, 36, 31, 43, 33, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 37, 26, 25, 27,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 39,  0, 41, 28,  0, 
     0, 24, 14, 15, 11,  7,  6, 23, 20,  5,  2,  2,  8, 22, 10, 16, 
    17,  2, 18,  9, 13, 12,  2, 21, 19,  2,  2, 38, 42, 40,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\17\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\1\2\0\1\23\1\24"+
    "\13\3\1\25\1\3\1\26\2\3\1\27\4\3\1\30"+
    "\1\3\1\31\1\32\1\33\1\34\2\0\1\35\3\3"+
    "\1\36\1\3\1\37\2\3\1\40\3\3\1\41\1\42"+
    "\3\3\1\43\3\3\1\44\1\45\1\0\3\3\1\46"+
    "\1\3\1\47\1\50\1\51\1\3\1\52\2\3\1\53"+
    "\1\3\1\54\1\3\1\0\1\3\1\55\1\3\1\56"+
    "\2\3\1\57\1\60\1\61\1\0\2\3\1\62\1\63"+
    "\1\0\1\64\1\3\1\0\1\65\1\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\u0439\0\u0468\0\u0497\0\u04c6\0\57\0\215"+
    "\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\215\0\u0758\0\u0787"+
    "\0\215\0\u07b6\0\u07e5\0\u0814\0\u0843\0\215\0\u0872\0\57"+
    "\0\57\0\57\0\57\0\u08a1\0\u0468\0\57\0\u08d0\0\u08ff"+
    "\0\u092e\0\215\0\u095d\0\u098c\0\u09bb\0\u09ea\0\215\0\u0a19"+
    "\0\u0a48\0\u0a77\0\215\0\215\0\u0aa6\0\u0ad5\0\u0b04\0\215"+
    "\0\u0b33\0\u0b62\0\u0b91\0\215\0\215\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\215\0\u0c7c\0\215\0\215\0\215\0\u0cab\0\215"+
    "\0\u0cda\0\u0d09\0\215\0\u0d38\0\215\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\215\0\u0df4\0\215\0\u0e23\0\u0e52\0\215\0\215\0\215"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\215\0\215\0\u0f0e\0\215\0\u0f3d"+
    "\0\u0f6c\0\215\0\u0f9b\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\4\1\20"+
    "\1\21\1\22\3\4\1\23\1\24\1\4\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\6\2\1\44\1\2"+
    "\60\0\1\3\56\0\1\45\1\4\2\0\24\4\21\0"+
    "\1\45\1\46\1\47\6\0\1\6\53\0\1\45\1\4"+
    "\2\0\1\4\1\50\3\4\1\51\16\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\7\4\1\52"+
    "\3\4\1\53\10\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\3\4\1\54\1\4\1\55\16\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\13\4\1\56\10\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\7\4\1\57\1\60\13\4\21\0"+
    "\1\45\1\46\1\47\3\0\1\45\1\4\2\0\2\4"+
    "\1\61\10\4\1\62\10\4\21\0\1\45\1\46\1\47"+
    "\3\0\1\45\1\4\2\0\1\63\12\4\1\64\10\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\5\4\1\65\16\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\13\4\1\66\3\4\1\67\4\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\3\4\1\70\20\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\15\4\1\71\6\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\15\4\1\72"+
    "\6\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\2\4\1\73\14\4\1\74\4\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\13\4\1\75"+
    "\10\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\4\4\1\76\1\77\16\4\21\0\1\45\1\46"+
    "\1\47\33\0\1\100\56\0\1\101\1\0\1\102\54\0"+
    "\1\103\62\0\1\104\21\0\3\105\1\0\36\105\2\0"+
    "\6\105\1\0\2\105\1\106\2\0\2\45\2\0\24\45"+
    "\21\0\1\45\1\46\1\47\3\0\2\46\2\0\24\46"+
    "\21\0\1\46\1\0\1\47\3\0\1\45\1\4\2\0"+
    "\10\4\1\107\3\4\1\110\7\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\5\4\1\111\16\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\15\4\1\112\6\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\4\4\1\113\17\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\6\4\1\114"+
    "\15\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\5\4\1\115\5\4\1\116\10\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\11\4\1\117"+
    "\12\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\2\4\1\120\12\4\1\121\6\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\16\4\1\122"+
    "\5\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\10\4\1\123\13\4\21\0\1\45\1\46\1\47"+
    "\3\0\1\45\1\4\2\0\21\4\1\124\2\4\21\0"+
    "\1\45\1\46\1\47\3\0\1\45\1\4\2\0\7\4"+
    "\1\125\14\4\21\0\1\45\1\46\1\47\3\0\1\45"+
    "\1\4\2\0\10\4\1\126\13\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\2\4\1\127\21\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\4\4\1\130\17\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\1\131\23\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\5\4\1\132\16\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\1\133\23\4\21\0\1\45\1\46\1\47\3\0\1\45"+
    "\1\4\2\0\6\4\1\134\15\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\6\4\1\135\15\4"+
    "\21\0\1\45\1\46\1\47\51\0\1\136\10\0\1\45"+
    "\1\4\2\0\2\4\1\137\21\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\7\4\1\140\14\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\12\4\1\141\11\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\2\4\1\142\21\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\1\143\23\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\22\4\1\144\1\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\14\4\1\145\7\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\14\4\1\146"+
    "\7\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\1\147\23\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\10\4\1\150\13\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\11\4\1\151"+
    "\12\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\1\152\23\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\5\4\1\153\16\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\5\4\1\154"+
    "\16\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\6\4\1\155\15\4\21\0\1\45\1\46\1\47"+
    "\3\0\1\45\1\4\2\0\3\4\1\156\20\4\21\0"+
    "\1\45\1\46\1\47\36\0\1\157\23\0\1\45\1\4"+
    "\2\0\22\4\1\160\1\4\21\0\1\45\1\46\1\47"+
    "\3\0\1\45\1\4\2\0\10\4\1\161\13\4\21\0"+
    "\1\45\1\46\1\47\3\0\1\45\1\4\2\0\10\4"+
    "\1\162\13\4\21\0\1\45\1\46\1\47\3\0\1\45"+
    "\1\4\2\0\1\4\1\163\22\4\21\0\1\45\1\46"+
    "\1\47\3\0\1\45\1\4\2\0\5\4\1\164\16\4"+
    "\21\0\1\45\1\46\1\47\3\0\1\45\1\4\2\0"+
    "\3\4\1\165\20\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\3\4\1\166\20\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\10\4\1\167"+
    "\13\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\2\4\1\170\21\4\21\0\1\45\1\46\1\47"+
    "\52\0\1\171\7\0\1\45\1\4\2\0\2\4\1\172"+
    "\21\4\21\0\1\45\1\46\1\47\3\0\1\45\1\4"+
    "\2\0\1\173\23\4\21\0\1\45\1\46\1\47\3\0"+
    "\1\45\1\4\2\0\22\4\1\174\1\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\2\4\1\175"+
    "\21\4\21\0\1\45\1\46\1\47\53\0\1\176\6\0"+
    "\1\45\1\4\2\0\15\4\1\177\6\4\21\0\1\45"+
    "\1\46\1\47\3\0\1\45\1\4\2\0\13\4\1\200"+
    "\10\4\21\0\1\45\1\46\1\47\40\0\1\201\21\0"+
    "\1\45\1\4\2\0\5\4\1\202\16\4\21\0\1\45"+
    "\1\46\1\47\37\0\1\203\71\0\1\204\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\23\1\12\11\2\1\2\0"+
    "\1\11\30\1\4\11\2\0\1\11\27\1\1\0\20\1"+
    "\1\0\11\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private SymbolFactory sf;
	private int lineanum;
	private boolean debug;

	public Scanner(java.io.InputStream r, SymbolFactory sf){
                this(r);
                this.sf=sf;
                lineanum=0;
                debug=true;
        }
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { if(debug) System.out.println("token INT");
			return sf.newSymbol("INT",sym.INT);
          }
        case 55: break;
        case 10: 
          { if(debug) System.out.println("token CS");
			return sf.newSymbol("CS",sym.CS);
          }
        case 56: break;
        case 50: 
          { if(debug) System.out.println("token STRING");
			return sf.newSymbol("STRING",sym.STRING);
          }
        case 57: break;
        case 8: 
          { if(debug) System.out.println("token RT");
			return sf.newSymbol("RT",sym.RT);
          }
        case 58: break;
        case 3: 
          { if(debug) System.out.println("token ID");
				return sf.newSymbol("ID",sym.ID,new String(yytext()));
          }
        case 59: break;
        case 24: 
          { if(debug) System.out.println("token AS");
			return sf.newSymbol("AS",sym.AS);
          }
        case 60: break;
        case 44: 
          { if(debug) System.out.println("token WEND");
			return sf.newSymbol("WEND",sym.WEND);
          }
        case 61: break;
        case 32: 
          { if(debug) System.out.println("token SUB");
			return sf.newSymbol("SUB",sym.SUB);
          }
        case 62: break;
        case 29: 
          { if(debug) System.out.println("token COMILLAS");
                    	return sf.newSymbol("COMILLAS",sym.COMILLAS,yytext());
          }
        case 63: break;
        case 54: 
          { /* salto comentarios */ if(debug) System.out.println("token COMENTARIO");
                                        return sf.newSymbol("COMEN", sym.COMEN);
          }
        case 64: break;
        case 36: 
          { if(debug) System.out.println("token MOD");
			return sf.newSymbol("MOD",sym.MOD);
          }
        case 65: break;
        case 22: 
          { if(debug) System.out.println("token TO");
			return sf.newSymbol("TO",sym.TO);
          }
        case 66: break;
        case 35: 
          { if(debug) System.out.println("token CLS");
			return sf.newSymbol("CLS",sym.CLS);
          }
        case 67: break;
        case 7: 
          { if(debug) System.out.println("token LT");
			return sf.newSymbol("LT",sym.LT);
          }
        case 68: break;
        case 5: 
          { /* saltos espacios en blanco*/
          }
        case 69: break;
        case 12: 
          { if(debug) System.out.println("token MINUS");
			return sf.newSymbol("MINUS",sym.MINUS);
          }
        case 70: break;
        case 16: 
          { if(debug) System.out.println("token RPAREN");
			return sf.newSymbol("RPAREN",sym.RPAREN);
          }
        case 71: break;
        case 14: 
          { if(debug) System.out.println("token OVER");
			return sf.newSymbol("OVER",sym.OVER);
          }
        case 72: break;
        case 13: 
          { if(debug) System.out.println("token TIMES");
			return sf.newSymbol("TIMES",sym.TIMES);
          }
        case 73: break;
        case 4: 
          { if(debug) System.out.println("token FL");
				return sf.newSymbol("FL",sym.FL);
          }
        case 74: break;
        case 33: 
          { if(debug) System.out.println("token NOT");
			return sf.newSymbol("NOT",sym.NOT);
          }
        case 75: break;
        case 53: 
          { if(debug) System.out.println("token FUNC");
			return sf.newSymbol("FUNC",sym.FUNC);
          }
        case 76: break;
        case 25: 
          { if(debug) System.out.println("token COM");
			return sf.newSymbol("COM",sym.COM);
          }
        case 77: break;
        case 23: 
          { if(debug) System.out.println("token OR");
			return sf.newSymbol("OR",sym.OR);
          }
        case 78: break;
        case 1: 
          { System.err.println("Caracter Ilegal encontrado en analisis lexico: " + yytext() + "\n");
          }
        case 79: break;
        case 34: 
          { if(debug) System.out.println("token DIM");
			return sf.newSymbol("DIM",sym.DIM);
          }
        case 80: break;
        case 37: 
          { if(debug) System.out.println("token AND");
			return sf.newSymbol("AND",sym.AND);
          }
        case 81: break;
        case 45: 
          { if(debug) System.out.println("token INPUT");
			return sf.newSymbol("INPUT",sym.INPUT);
          }
        case 82: break;
        case 28: 
          { if(debug) System.out.println("token RTE");
			return sf.newSymbol("RTE",sym.RTE);
          }
        case 83: break;
        case 42: 
          { if(debug) System.out.println("token NEXT");
			return sf.newSymbol("NEXT",sym.NEXT);
          }
        case 84: break;
        case 38: 
          { if(debug) System.out.println("token ELSE");
			return sf.newSymbol("ELSE",sym.ELSE);
          }
        case 85: break;
        case 31: 
          { if(debug) System.out.println("token END");
			return sf.newSymbol("END",sym.END);
          }
        case 86: break;
        case 41: 
          { if(debug) System.out.println("token STEP");
			return sf.newSymbol("STEP",sym.STEP);
          }
        case 87: break;
        case 11: 
          { if(debug) System.out.println("token PLUS");
			return sf.newSymbol("PLUS",sym.PLUS);
          }
        case 88: break;
        case 39: 
          { if(debug) System.out.println("token LONG");
			return sf.newSymbol("LONG",sym.LONG);
          }
        case 89: break;
        case 6: 
          { if(debug) System.out.println("token ASSIGN");
			return sf.newSymbol("ASSIGN",sym.ASSIGN);
          }
        case 90: break;
        case 30: 
          { if(debug) System.out.println("token FOR");
			return sf.newSymbol("FOR",sym.FOR);
          }
        case 91: break;
        case 9: 
          { if(debug) System.out.println("token CIR");
			return sf.newSymbol("CIR",sym.CIR);
          }
        case 92: break;
        case 2: 
          { if(debug) System.out.println("token NUM");
			return sf.newSymbol("NUM",sym.NUM,new Integer(yytext()));
          }
        case 93: break;
        case 17: 
          { if(debug) System.out.println("token COMA");
			return sf.newSymbol("COMA",sym.COMA);
          }
        case 94: break;
        case 51: 
          { if(debug) System.out.println("token DOU");
			return sf.newSymbol("DOU",sym.DOU);
          }
        case 95: break;
        case 48: 
          { if(debug) System.out.println("token PRINT");
			return sf.newSymbol("PRINT",sym.PRINT);
          }
        case 96: break;
        case 47: 
          { if(debug) System.out.println("token UNTIL");
			return sf.newSymbol("UNTIL",sym.UNTIL);
          }
        case 97: break;
        case 18: 
          { if(debug) System.out.println("token SEMI");
			return sf.newSymbol("SEMI",sym.SEMI);
          }
        case 98: break;
        case 19: 
          { if(debug) System.out.println("token ID2");
                                        	return sf.newSymbol("ID2",sym.ID2,yytext());
          }
        case 99: break;
        case 49: 
          { if(debug) System.out.println("token WHILE");
			return sf.newSymbol("WHILE",sym.WHILE);
          }
        case 100: break;
        case 40: 
          { if(debug) System.out.println("token LOOP");
			return sf.newSymbol("LOOP",sym.LOOP);
          }
        case 101: break;
        case 26: 
          { if(debug) System.out.println("token LTE");
			return sf.newSymbol("LTE",sym.LTE);
          }
        case 102: break;
        case 20: 
          { if(debug) System.out.println("token IF");
			return sf.newSymbol("IF",sym.IF);
          }
        case 103: break;
        case 21: 
          { if(debug) System.out.println("token DO");
			return sf.newSymbol("DO",sym.DO);
          }
        case 104: break;
        case 46: 
          { if(debug) System.out.println("token ENDIF");
			return sf.newSymbol("ENDIF",sym.ENDIF);
          }
        case 105: break;
        case 15: 
          { if(debug) System.out.println("token LPAREN");
			return sf.newSymbol("LPAREN",sym.LPAREN);
          }
        case 106: break;
        case 43: 
          { if(debug) System.out.println("token THEN");
			return sf.newSymbol("THEN",sym.THEN);
          }
        case 107: break;
        case 27: 
          { if(debug) System.out.println("token DIF");
			return sf.newSymbol("DIF",sym.DIF);
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
