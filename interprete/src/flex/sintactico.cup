package flex;

import java_cup.runtime.*;
import NodosAST.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) 
			new parser(new Scanner(System.in,sf),sf).parse();
		else 
			new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal UNTIL;
terminal String ID;
terminal String NUMP;
terminal String COMILLAS;
terminal Integer NUM;
terminal SUB; /*falta*/
terminal FUNC; /*falta*/
terminal PRINT; 
terminal INPUT;
terminal FOR;
terminal NEXT;
terminal CLS; 
terminal WHILE;
terminal WEND;
terminal ENDIF;
terminal LOOP;
terminal DO;
terminal COMEN;
terminal DIM;
terminal INT;
terminal ASI;
terminal ASS;
terminal ASD;
terminal STRING; /*falta*/
terminal DOU; /*falta*/
terminal AND; 
terminal OR;
terminal NOT;
terminal LT;
terminal RT;
terminal RTE;
terminal LTE;
terminal DIF;
terminal CS;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal ASSIGN; 
terminal FL;
terminal STEP; 
terminal TO;
terminal COM;
terminal COMA;
terminal MOD;
terminal CIR;
terminal ELSEIF;
terminal DOUN;
terminal STRD;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase for_stmt;
non terminal NodoBase do_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase dim_stmt;
non terminal NodoBase conj_var;
non terminal NodoBase print_stmt;
non terminal NodoBase input_stmt;
non terminal NodoBase conjunto;

/* Precedencia de operadores */
precedence left NOT;
precedence left AND;
precedence left OR;
precedence left COM;
precedence left LT;
precedence left LTE;
precedence left RT;
precedence left RTE;
precedence left DIF;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OVER;
precedence left CIR;
precedence left LPAREN;
precedence left RPAREN;

/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(debug) System.out.println("\t regla 1a"); 
					ast = s;
					:}
		| stmt_seq:s END	{: if(debug) System.out.println("\t regla 1b"); 
					ast = s;
					:}
		| FL END {: if(debug) System.out.println("\t regla 1b"); :}
		| END FL{: if(debug) System.out.println("\t regla 1b"); :}
		| FL {: if(debug) System.out.println("\t regla 1b"); :}
		;

stmt_seq    ::= stmt_seq:ini FL stmt:sent	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent FL{: if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | for_stmt:sfor	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=sfor;
						:}
			| do_stmt:sdo	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=sdo;
						:}
			| while_stmt:swhile{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=swhile;
						:}
			| dim_stmt:sdim	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=sdim;
						:}
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
			| exp:ex	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=ex;
						:}
                        | print_stmt:ex	{: if(debug) System.out.println("\t regla 3b");
						RESULT=ex;
						:}
                        | input_stmt:ex	{: if(debug) System.out.println("\t regla 3b");
						RESULT=ex;
						:}
			| CLS{: if(debug) System.out.println("\t regla 3b"); 
						:}
            ;

if_stmt     ::= IF exp:ex THEN FL stmt_seq:pthen ENDIF 	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
			| IF exp:ex THEN FL stmt_seq:pthen ELSE FL stmt_seq:pelse ENDIF	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

for_stmt     ::= FOR assign_stmt:asi TO exp:ex1 FL stmt_seq:pfor NEXT exp:ex2 {: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoFor(asi,ex1,ex2,pfor);
		:}
			| FOR exp:ex TO exp:ex1 STEP exp:ex2 FL stmt_seq:pfor NEXT exp:ex3	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoFor(ex,ex1,ex2,ex3,pfor);		
		:}
		;

do_stmt     ::= DO FL stmt_seq:pdo LOOP UNTIL exp:ex1 {: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoDo(pdo,ex1);
		:}
		;

while_stmt     ::= WHILE exp:ex FL stmt_seq:pwhile WEND {: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoWhile(ex,pwhile);
		:}
		;

dim_stmt ::= DIM ID:var ASI {: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoDim(var);
		:}
		| DIM ID:var ASI COMA conj_var:con {: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoDim(var,con);
		:}
		| DIM NUMP:var {: if(debug) System.out.println("\t regla 5");
							RESULT = new NodoDim(var);
		:}
		| DIM NUMP:var COMA conj_var:con {: if(debug) System.out.println("\t regla 5");
							RESULT = new NodoDim(var,con);
		:}
		;

conj_var ::= ID:var COMA conj_var:cv {: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoConj_var(var,cv);
		:}
		| ID:var {: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoConj_var(var);
		:}
		| NUMP:var COMA conj_var:cv {: if(debug) System.out.println("\t regla 5");
							RESULT = new NodoConj_var(var,cv);
		:}
		| NUMP:var {: if(debug) System.out.println("\t regla 5");
							RESULT = new NodoConj_var(var);
		:}
		;

print_stmt ::= PRINT COMILLAS:com SEMI conjunto:conju {: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoImprimir(com,conju);
				:}
		| PRINT COMILLAS:pc{: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoImprimir(pc);
				:} 
		| PRINT conjunto:con{: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoImprimir(con);
				:}
		;

conjunto ::= simple_exp:es SEMI COMILLAS:pc SEMI conjunto:conju{: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoConjunto(es,pc,conju);
				:}
		| simple_exp:es{: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoConjunto(es);
				:}
		| simple_exp:es SEMI COMILLAS:pc{: if(debug) System.out.println("\t regla 5"); 
					RESULT=new NodoConjunto(es,pc);
				:}
				;

input_stmt ::= INPUT NUMP:va{: if(debug) System.out.println("\t regla 5");
					RESULT=new NodoEntrada(va, va.toString());
				:}
		| INPUT COMILLAS:pc SEMI NUMP:va{: if(debug) System.out.println("\t regla 5");
					RESULT=new NodoEntrada(pc,va);
				:}
				;


assign_stmt ::= ID:variable 	{: if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
					;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI RT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
								:}
		| simple_exp:exI LTE simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
								:} 
		| simple_exp:exI RTE simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);		
								:}
		| simple_exp:exI DIF simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);		
								:}
		| simple_exp:exI COM simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.comparar,exD);
							:}
		| simple_exp:exI NOT simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.not,exD);
							:}
		| simple_exp:exI AND simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.and,exD);
							:}
		| simple_exp:exI OR simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.or,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| term:exI CIR factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.potencia,exD);
						:}
		| term:exI MOD factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.modulo,exD);
						:}
		| factor:ex	{: if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
					RESULT= new NodoValor(valor.toString());					
					}else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					System.out.println("Devolvi nodo identificador");
					if(variable!=null){
					RESULT= new NodoIdentificador(variable.toString());		
					}else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| NUMP:variable	{: if(debug) System.out.println("\t regla 12c");
					System.out.println("Devolvi nodo identificador2");
					if(variable!=null){
					RESULT= new NodoIdentificador(variable.toString());		
					}else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		;