package flex;

import java_cup.runtime.*;
import NodosAST.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
                parser p = null;
		if (args.length==0) 
			p = new parser(new Scanner(System.in,sf),sf);
		else 
			p= new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);
                p.parse();
                NodoBase root = p.action_obj.getRoot();
                new Interprete(root).interpretar();
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
        
        public NodoBase getRoot(){
            return ast;
        }
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal UNTIL;
terminal String ID;
terminal String NUMP;
terminal String COMILLAS;
terminal String CADENA;
terminal Integer NUM;
terminal SUB; /*falta*/
terminal FUNC; /*falta*/
terminal PRINT; 
terminal INPUT;
terminal FOR;
terminal NEXT;
terminal CLS; 
terminal WHILE;
terminal WEND;
terminal ENDIF;
terminal LOOP;
terminal DO;
terminal COMEN;
terminal DIM;
terminal INT;
terminal AS;
terminal STRING; /*falta*/
terminal DOU; /*falta*/
terminal AND; 
terminal OR;
terminal NOT;
terminal LT;
terminal RT;
terminal RTE;
terminal LTE;
terminal DIF;
terminal CS;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal ASSIGN; 
terminal FL;
terminal STEP; 
terminal TO;
terminal COM;
terminal COMA;
terminal MOD;
terminal CIR;
terminal ELSEIF;
terminal DOUN;
terminal STRD;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase for_stmt;
non terminal NodoBase do_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase dim_stmt;
non terminal NodoBase conj_var;
non terminal NodoBase print_stmt;
non terminal NodoBase input_stmt;
non terminal NodoBase conjunto;

/* Precedencia de operadores */
precedence left NOT;
precedence left AND;
precedence left OR;
precedence left COM;
precedence left LT;
precedence left LTE;
precedence left RT;
precedence left RTE;
precedence left DIF;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OVER;
precedence left CIR;
precedence left LPAREN;
precedence left RPAREN;

/* REGLAS GRAMATICALES */
program ::= 
    stmt_seq:s{:
        if(debug) 
            System.out.println("\t program ::= stmt_seq"); 
        ast = s;
    :}
    | stmt_seq:s END{: 
        if(debug) 
            System.out.println("\t program ::= stmt_seq END"); 
        ast = s;
    :}
    |ID {:
        if(debug) 
            System.out.println("\t program ::= ID"); 
    :}
    |  {:
        if(debug) 
            System.out.println("\t program ::= NADA"); 
    :}
    | error {: 
        if(debug)
            System.out.println("\t program ::= ERROR"); 
    :}
;

stmt_seq ::= 
    stmt_seq:ini FL stmt:sent{:
        if(debug) System.out.println("\t stmt_seq ::= stmt_seq FL stmt"); 
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
		}
		hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
    :}
    | stmt:sent{: 
        if(debug) System.out.println("\t stmt_seq ::= stmt"); 
            RESULT=sent;				
    :}
;

stmt ::= 
    print_stmt:sentencia {:
        if(debug) System.out.println("\t stmt ::= print_stmt"); 
            RESULT = sentencia; 
    :}
;

print_stmt ::=
    PRINT COMILLAS:texto {:
        if(debug)
            System.out.println("\t print_stmt ::= PRINT COMILLAS"); 
        RESULT = new NodoImprimir(new NodoCadena(texto));
    :}
;

dim_stmt ::=
    DIM ID:var AS INT{: 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS INT FL"); 
        RESULT = new NodoDim(var);
    :}
;
