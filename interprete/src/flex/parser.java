
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 21 17:29:38 GMT-04:30 2011
//----------------------------------------------------

package flex;

import java_cup.runtime.*;
import NodosAST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 21 17:29:38 GMT-04:30 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\002\000\002\002\003" +
    "\000\002\003\005\000\002\003\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\020" +
    "\004\000\002\017\005\000\002\017\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\005\011\000\002" +
    "\005\015\000\002\005\023\000\002\013\013\000\002\013" +
    "\015\000\002\014\011\000\002\015\010\000\002\006\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\026\002\ufffd\003\016\004\010\007\007\011" +
    "\012\020\015\022\023\025\005\031\013\033\022\001\002" +
    "\000\010\002\ufff3\007\ufff3\061\ufff3\001\002\000\014\011" +
    "\034\012\037\014\030\015\031\055\040\001\002\000\010" +
    "\002\ufff4\007\ufff4\061\ufff4\001\002\000\004\002\ufffe\001" +
    "\002\000\014\011\034\012\037\014\030\015\031\055\040" +
    "\001\002\000\004\002\145\001\002\000\004\060\143\001" +
    "\002\000\004\061\135\001\002\000\010\002\001\007\134" +
    "\061\133\001\002\000\004\013\132\001\002\000\004\002" +
    "\ufffc\001\002\000\010\002\ufff9\007\ufff9\061\ufff9\001\002" +
    "\000\010\002\ufff7\007\ufff7\061\ufff7\001\002\000\010\002" +
    "\ufff5\007\ufff5\061\ufff5\001\002\000\012\011\117\012\122" +
    "\071\116\072\121\001\002\000\004\011\012\001\002\000" +
    "\010\002\ufff6\007\ufff6\061\ufff6\001\002\000\010\002\ufffa" +
    "\007\ufffa\061\ufffa\001\002\000\004\063\027\001\002\000" +
    "\014\011\034\012\037\014\030\015\031\055\040\001\002" +
    "\000\056\002\uffcb\005\uffcb\007\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\056\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\066\uffcb\067\uffcb\001\002\000\056\002\uffce" +
    "\005\uffce\007\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\056\uffce\061\uffce\062\uffce\063\uffce\064\uffce\066" +
    "\uffce\067\uffce\001\002\000\056\002\uffd5\005\uffd5\007\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\052\uffd5\053\070\054\066\056\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\066\065\067\067\001" +
    "\002\000\006\061\102\062\101\001\002\000\056\002\uffcd" +
    "\005\uffcd\007\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\056\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\056\002\uffd0\005\uffd0\007\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\066\uffd0\067\uffd0\001" +
    "\002\000\046\002\uffd8\005\uffd8\007\uffd8\040\044\041\055" +
    "\042\052\043\054\044\053\045\050\046\045\047\046\051" +
    "\047\052\043\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064\051" +
    "\001\002\000\056\002\uffcc\005\uffcc\007\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\066\uffcc\067\uffcc\001\002\000\014" +
    "\011\034\012\037\014\030\015\031\055\040\001\002\000" +
    "\004\056\042\001\002\000\056\002\uffcf\005\uffcf\007\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf\001" +
    "\002\000\014\011\034\012\037\014\030\015\031\055\040" +
    "\001\002\000\014\011\034\012\037\014\030\015\031\055" +
    "\040\001\002\000\014\011\034\012\037\014\030\015\031" +
    "\055\040\001\002\000\014\011\034\012\037\014\030\015" +
    "\031\055\040\001\002\000\014\011\034\012\037\014\030" +
    "\015\031\055\040\001\002\000\014\011\034\012\037\014" +
    "\030\015\031\055\040\001\002\000\014\011\034\012\037" +
    "\014\030\015\031\055\040\001\002\000\014\011\034\012" +
    "\037\014\030\015\031\055\040\001\002\000\014\011\034" +
    "\012\037\014\030\015\031\055\040\001\002\000\014\011" +
    "\034\012\037\014\030\015\031\055\040\001\002\000\014" +
    "\011\034\012\037\014\030\015\031\055\040\001\002\000" +
    "\024\002\uffd9\005\uffd9\007\uffd9\051\047\052\043\056\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\001\002\000\024\002\uffe1\005" +
    "\uffe1\007\uffe1\051\047\052\043\056\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\024\002\uffe0\005\uffe0\007\uffe0\051" +
    "\047\052\043\056\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002" +
    "\000\024\002\uffdb\005\uffdb\007\uffdb\051\047\052\043\056" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\001\002\000\024\002\uffdc" +
    "\005\uffdc\007\uffdc\051\047\052\043\056\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\001\002\000\024\002\uffde\005\uffde\007\uffde" +
    "\051\047\052\043\056\uffde\061\uffde\062\uffde\063\uffde\001" +
    "\002\000\056\002\uffd7\005\uffd7\007\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\053\070\054\066\056\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\066\065\067\067\001\002\000\014\011" +
    "\034\012\037\014\030\015\031\055\040\001\002\000\014" +
    "\011\034\012\037\014\030\015\031\055\040\001\002\000" +
    "\014\011\034\012\037\014\030\015\031\055\040\001\002" +
    "\000\014\011\034\012\037\014\030\015\031\055\040\001" +
    "\002\000\056\002\uffd4\005\uffd4\007\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\066\uffd4\067\uffd4\001\002\000\056\002" +
    "\uffd2\005\uffd2\007\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\056\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\066\uffd2\067\uffd2\001\002\000\056\002\uffd3\005\uffd3\007" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\066\uffd3\067\uffd3" +
    "\001\002\000\056\002\uffd1\005\uffd1\007\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\056\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1\001\002\000\024" +
    "\002\uffdd\005\uffdd\007\uffdd\051\047\052\043\056\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\001\002\000\024\002\uffdf\005\uffdf" +
    "\007\uffdf\051\047\052\043\056\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\001\002\000\024\002\uffda\005\uffda\007\uffda\051\047" +
    "\052\043\056\uffda\061\uffda\062\uffda\063\uffda\001\002\000" +
    "\056\002\uffd6\005\uffd6\007\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\053\070\054\066\056\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\066\065\067\067\001\002\000\014\011\034\012" +
    "\037\014\030\015\031\055\040\001\002\000\020\004\010" +
    "\011\012\020\015\022\023\025\005\031\013\033\022\001" +
    "\002\000\004\061\104\001\002\000\022\004\010\011\012" +
    "\020\015\022\023\023\106\025\005\031\013\033\022\001" +
    "\002\000\010\002\ufffb\007\ufffb\061\ufffb\001\002\000\014" +
    "\011\034\012\037\014\030\015\031\055\040\001\002\000" +
    "\010\002\uffe6\007\uffe6\061\uffe6\001\002\000\004\061\111" +
    "\001\002\000\020\004\010\011\012\020\015\022\023\025" +
    "\005\031\013\033\022\001\002\000\004\061\113\001\002" +
    "\000\022\004\010\011\012\020\015\022\023\023\114\025" +
    "\005\031\013\033\022\001\002\000\014\011\034\012\037" +
    "\014\030\015\031\055\040\001\002\000\010\002\uffe5\007" +
    "\uffe5\061\uffe5\001\002\000\012\002\uffeb\007\uffeb\061\uffeb" +
    "\065\uffeb\001\002\000\004\035\126\001\002\000\012\002" +
    "\ufff0\007\ufff0\061\ufff0\065\ufff0\001\002\000\012\002\uffea" +
    "\007\uffea\061\uffea\065\uffea\001\002\000\012\002\uffec\007" +
    "\uffec\061\uffec\065\uffec\001\002\000\012\002\ufff8\007\ufff8" +
    "\061\ufff8\065\124\001\002\000\012\011\117\012\122\071" +
    "\116\072\121\001\002\000\012\002\ufff1\007\ufff1\061\ufff1" +
    "\065\ufff1\001\002\000\010\034\131\036\127\037\130\001" +
    "\002\000\012\002\uffee\007\uffee\061\uffee\065\uffee\001\002" +
    "\000\012\002\uffed\007\uffed\061\uffed\065\uffed\001\002\000" +
    "\012\002\uffef\007\uffef\061\uffef\065\uffef\001\002\000\010" +
    "\002\ufff2\007\ufff2\061\ufff2\001\002\000\020\004\010\011" +
    "\012\020\015\022\023\025\005\031\013\033\022\001\002" +
    "\000\004\002\uffff\001\002\000\020\004\010\011\012\020" +
    "\015\022\023\025\005\031\013\033\022\001\002\000\004" +
    "\061\137\001\002\000\022\004\010\011\012\020\015\022" +
    "\023\025\005\030\140\031\013\033\022\001\002\000\004" +
    "\010\141\001\002\000\014\011\034\012\037\014\030\015" +
    "\031\055\040\001\002\000\010\002\uffe4\007\uffe4\061\uffe4" +
    "\001\002\000\014\011\034\012\037\014\030\015\031\055" +
    "\040\001\002\000\012\002\uffe2\007\uffe2\061\uffe2\063\uffe2" +
    "\001\002\000\004\002\000\001\002\000\004\005\147\001" +
    "\002\000\004\061\150\001\002\000\020\004\010\011\012" +
    "\020\015\022\023\025\005\031\013\033\022\001\002\000" +
    "\004\061\152\001\002\000\026\004\010\006\154\011\012" +
    "\020\015\022\023\025\005\027\155\031\013\033\022\070" +
    "\153\001\002\000\014\011\034\012\037\014\030\015\031" +
    "\055\040\001\002\000\004\061\156\001\002\000\010\002" +
    "\uffe9\007\uffe9\061\uffe9\001\002\000\020\004\010\011\012" +
    "\020\015\022\023\025\005\031\013\033\022\001\002\000" +
    "\004\061\160\001\002\000\022\004\010\011\012\020\015" +
    "\022\023\025\005\027\161\031\013\033\022\001\002\000" +
    "\010\002\uffe8\007\uffe8\061\uffe8\001\002\000\004\005\163" +
    "\001\002\000\004\061\164\001\002\000\020\004\010\011" +
    "\012\020\015\022\023\025\005\031\013\033\022\001\002" +
    "\000\004\061\166\001\002\000\022\004\010\006\167\011" +
    "\012\020\015\022\023\025\005\031\013\033\022\001\002" +
    "\000\004\061\170\001\002\000\020\004\010\011\012\020" +
    "\015\022\023\025\005\031\013\033\022\001\002\000\004" +
    "\061\172\001\002\000\022\004\010\011\012\020\015\022" +
    "\023\025\005\027\173\031\013\033\022\001\002\000\010" +
    "\002\uffe7\007\uffe7\061\uffe7\001\002\000\004\061\175\001" +
    "\002\000\020\004\010\011\012\020\015\022\023\025\005" +
    "\031\013\033\022\001\002\000\004\061\177\001\002\000" +
    "\022\004\010\011\012\020\015\022\023\025\005\026\200" +
    "\031\013\033\022\001\002\000\010\002\uffe3\007\uffe3\061" +
    "\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\024\002\010\003\013\004\024\005\017\006" +
    "\023\013\020\014\005\015\003\020\016\001\001\000\002" +
    "\001\001\000\012\007\173\010\035\011\031\012\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\145" +
    "\010\035\011\031\012\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\117\017\122\001\001" +
    "\000\004\006\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\032\010\035\011\031" +
    "\012\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\040\010\035\011\031\012\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\077\012\034\001\001\000" +
    "\010\010\076\011\031\012\034\001\001\000\010\010\075" +
    "\011\031\012\034\001\001\000\010\010\074\011\031\012" +
    "\034\001\001\000\006\011\063\012\034\001\001\000\010" +
    "\010\062\011\031\012\034\001\001\000\010\010\061\011" +
    "\031\012\034\001\001\000\010\010\060\011\031\012\034" +
    "\001\001\000\010\010\057\011\031\012\034\001\001\000" +
    "\010\010\056\011\031\012\034\001\001\000\010\010\055" +
    "\011\031\012\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\073\001" +
    "\001\000\004\012\072\001\001\000\004\012\071\001\001" +
    "\000\004\012\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\107\010\035\011\031\012\034\001\001\000\022" +
    "\003\102\004\024\005\017\006\023\013\020\014\005\015" +
    "\003\020\016\001\001\000\002\001\001\000\020\004\104" +
    "\005\017\006\023\013\020\014\005\015\003\020\016\001" +
    "\001\000\002\001\001\000\012\007\106\010\035\011\031" +
    "\012\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\111\004\024\005\017\006\023\013\020\014\005" +
    "\015\003\020\016\001\001\000\002\001\001\000\020\004" +
    "\104\005\017\006\023\013\020\014\005\015\003\020\016" +
    "\001\001\000\012\007\114\010\035\011\031\012\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\104\005\017" +
    "\006\023\013\020\014\005\015\003\020\016\001\001\000" +
    "\002\001\001\000\022\003\135\004\024\005\017\006\023" +
    "\013\020\014\005\015\003\020\016\001\001\000\002\001" +
    "\001\000\020\004\104\005\017\006\023\013\020\014\005" +
    "\015\003\020\016\001\001\000\002\001\001\000\012\007" +
    "\141\010\035\011\031\012\034\001\001\000\002\001\001" +
    "\000\012\007\143\010\035\011\031\012\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\150\004\024\005\017\006\023\013" +
    "\020\014\005\015\003\020\016\001\001\000\002\001\001" +
    "\000\020\004\104\005\017\006\023\013\020\014\005\015" +
    "\003\020\016\001\001\000\012\007\161\010\035\011\031" +
    "\012\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\156\004\024\005\017\006\023\013\020\014\005" +
    "\015\003\020\016\001\001\000\002\001\001\000\020\004" +
    "\104\005\017\006\023\013\020\014\005\015\003\020\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\164\004\024\005\017\006\023\013\020" +
    "\014\005\015\003\020\016\001\001\000\002\001\001\000" +
    "\020\004\104\005\017\006\023\013\020\014\005\015\003" +
    "\020\016\001\001\000\002\001\001\000\022\003\170\004" +
    "\024\005\017\006\023\013\020\014\005\015\003\020\016" +
    "\001\001\000\002\001\001\000\020\004\104\005\017\006" +
    "\023\013\020\014\005\015\003\020\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\175\004\024\005" +
    "\017\006\023\013\020\014\005\015\003\020\016\001\001" +
    "\000\002\001\001\000\020\004\104\005\017\006\023\013" +
    "\020\014\005\015\003\020\016\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
                parser p = null;
		if (args.length==0) 
			p = new parser(new Scanner(System.in,sf),sf);
		else 
			p= new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);
                p.parse();
                NodoBase root = p.action_obj.getRoot();
                new Interprete(root).interpretar();
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
        
        public NodoBase getRoot(){
            return ast;
        }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= CADENA 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t factor ::= CADENA");
        if(var!=null){
            RESULT= new NodoValor(var.toString());					
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= CADENA");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= NUMP 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t factor ::= NUMP");
        if(variable!=null){
            RESULT= new NodoIdentificador(variable.toString());		
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= NUMP");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t factor ::= ID"); 
        if(variable!=null){
            RESULT= new NodoIdentificador(variable.toString());		
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= ID");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t factor ::= NUM"); 
        if(valor!=null){
            RESULT= new NodoValor(valor.toString());					
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= NUM");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if(debug) 
            System.out.println("\t factor ::= LPAREN exp RPAREN"); 
        RESULT = ex;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t term ::= factor"); 
        RESULT=ex;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term MOD factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t term ::= term MOD factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.modulo,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term CIR factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t term ::= term CIR factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.potencia,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t term ::= term OVER factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t term ::= term TIMES factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.por,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t simple_exp ::= term"); 
        RESULT=ex;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t simple_exp ::= simple_exp - simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t simple_exp ::= simple_exp + simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp"); 
        RESULT = ex;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= simple_exp OR simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp OR simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.or,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= simple_exp AND simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp AND simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.and,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= simple_exp NOT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp NOT simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.not,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= simple_exp COM simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp COM simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.comparar,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= simple_exp DIF simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp DIF simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= simple_exp RTE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t exp ::= simple_exp RTE simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);		
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= simple_exp LTE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp LTE simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= simple_exp RT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t exp ::= simple_exp RT simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex1 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t exp ::= simple_exp LT simple_exp"); 
        RESULT = ex1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assign_stmt ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t assign_stmt ::= ID ASSIGN exp");
        if(variable!=null)
            RESULT = new NodoAsignacion(variable.toString(),ex);
        else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0001 assign_stmt ::= ID ASSIGN exp");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while_stmt ::= WHILE exp FL stmt_seq FL WEND 
            {
              NodoBase RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase instrucciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        if(debug)
            System.out.println("\t while_stmt ::= WHILE exp stmt_seq WEND");
        RESULT = new NodoWhile(condicion,instrucciones);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // do_stmt ::= DO FL stmt_seq FL LOOP UNTIL exp 
            {
              NodoBase RESULT =null;
		int instruleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase instru = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t do_stmt ::= DO instrucciones LOOP UNTIL condicion");
        RESULT = new NodoDo(instru,condicion);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_stmt ::= FOR assign_stmt TO exp STEP exp FL stmt_seq FL NEXT exp 
            {
              NodoBase RESULT =null;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		NodoBase indice = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase paso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase instrucciones = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int siguienteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siguienteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase siguiente = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t for_stmt ::=FOR assign_stmt TO exp STEP exp FL stmt_seq FL NEXT exp");
        RESULT = new NodoFor(indice,ex,paso,siguiente,instrucciones);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_stmt ::= FOR assign_stmt TO exp FL stmt_seq FL NEXT exp 
            {
              NodoBase RESULT =null;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase indice = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase limite = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int siguienteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siguienteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase siguiente = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t for_stmt ::= FOR assign_stmt TO exp FL stmt_seq FL NEXT exp"); 
	RESULT = new NodoFor(indice,limite,siguiente,pfor);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF exp THEN FL stmt_seq FL ELSEIF exp THEN FL stmt_seq FL ELSE FL stmt_seq FL ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		NodoBase ex2 = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pthenifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pthenifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase pthenif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        if(debug)
            System.out.println("\t if_stmt ::= IF exp THEN stmt_seq ELSEIF stmt_seq ELSE stmt_seq ENDIF"); 
        RESULT = new NodoIf(ex,ex2,pthen,pthenif,pelse);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF exp THEN FL stmt_seq FL ELSE FL stmt_seq FL ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        if(debug)
            System.out.println("\t if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq ENDIF"); 
        RESULT = new NodoIf(ex,pthen,pelse);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= IF exp THEN FL stmt_seq FL ENDIF 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        if(debug) 
            System.out.println("\t if_stmt ::= IF exp THEN stmt_seq ENDIF"); 
        RESULT = new NodoIf(ex,pthen);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dim_stmt ::= STRD 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID STRING $"); 
        RESULT = new NodoDim((String)var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dim_stmt ::= DOUN 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID DOUBLE #"); 
        RESULT = new NodoDim((String)var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dim_stmt ::= NUMP 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID INTEGER %"); 
        RESULT = new NodoDim((String) var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dim_stmt ::= ID AS DOU 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS DOUBLE"); 
        RESULT = new NodoDim(var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dim_stmt ::= ID AS STRING 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS STRING"); 
        RESULT = new NodoDim(var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dim_stmt ::= ID AS INT 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS INT"); 
        RESULT = new NodoDim(var);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dim_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conj_var ::= dim_stmt 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t conj_var ::= DIM dim_stmt");
        RESULT = variable;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conj_var ::= conj_var COMA dim_stmt 
            {
              NodoBase RESULT =null;
		int variasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase varias = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int otrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase otras = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t conj_var ::= DIM dim_stmt COMA dim_stmt");
        NodoBase hijoActual = varias;
        if(hijoActual !=null){
            while(hijoActual.TieneHermano()){
                hijoActual = hijoActual.getHermanoDerecha();
            }
            hijoActual.setHermanoDerecha(otras);
            RESULT = varias;
        }else{
            RESULT = otras;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // print_stmt ::= PRINT COMILLAS 
            {
              NodoBase RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t print_stmt ::= PRINT COMILLAS"); 
        RESULT = new NodoImprimir(new NodoCadena(texto));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= while_stmt 
            {
              NodoBase RESULT =null;
		int ciclowhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciclowhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ciclowhile = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= do_stmt 
            {
              NodoBase RESULT =null;
		int ciclodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciclodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ciclodo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t stmt ::= do_stmt");
        RESULT = ciclodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int cicloforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cicloforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ciclofor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t stmt ::= for_stmt");
        RESULT = ciclofor;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int assigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase assig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t stmt ::= assign_stmt"); 
        RESULT=assig;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sentifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sentif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t stmt ::= if_stmt"); 
        RESULT = sentif;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= DIM conj_var 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug)
            System.out.println("\t stmt ::= dim_stmt"); 
        RESULT = declaracion;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= print_stmt 
            {
              NodoBase RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sentencia = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t stmt ::= print_stmt"); 
        RESULT = sentencia; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(debug) 
            System.out.println("\t stmt_seq ::= stmt"); 
        RESULT=sent;				
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_seq ::= stmt_seq FL stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t stmt_seq ::= stmt_seq FL stmt"); 
        NodoBase hijoActual = ini;
        if(hijoActual !=null){
            while(hijoActual.TieneHermano()){
                hijoActual = hijoActual.getHermanoDerecha();
            }
            hijoActual.setHermanoDerecha(sent);
            RESULT=ini;
        }else{
            RESULT=sent;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error 
            {
              Object RESULT =null;
		 
        if(debug)
            System.out.println("\t program ::= ERROR"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Object RESULT =null;
		
        if(debug) 
            System.out.println("\t program ::= NADA"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= END 
            {
              Object RESULT =null;
		
        if(debug) 
            System.out.println("\t program ::= END"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= stmt_seq END 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if(debug) 
            System.out.println("\t program ::= stmt_seq END"); 
        ast = s;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_seq 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(debug) 
            System.out.println("\t program ::= stmt_seq"); 
        ast = s;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

