package flex;

import java_cup.runtime.*;
import NodosAST.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {
		//TinySymbolFactory sf = new TinySymbolFactory();
		SymbolFactory sf = new DefaultSymbolFactory();
                parser p = null;
		if (args.length==0) 
			p = new parser(new Scanner(System.in,sf),sf);
		else 
			p= new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);
                p.parse();
                NodoBase root = p.action_obj.getRoot();
                new Interprete(root).interpretar();
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
        
        public NodoBase getRoot(){
            return ast;
        }
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal UNTIL;
terminal String ID;
terminal String NUMP;
terminal String COMILLAS;
terminal String CADENA;
terminal Integer NUM;
terminal SUB; /*falta*/
terminal FUNC; /*falta*/
terminal PRINT; 
terminal INPUT;
terminal FOR;
terminal NEXT;
terminal CLS; 
terminal WHILE;
terminal WEND;
terminal ENDIF;
terminal LOOP;
terminal DO;
terminal COMEN;
terminal DIM;
terminal INT;
terminal AS;
terminal STRING; /*falta*/
terminal DOU; /*falta*/
terminal AND; 
terminal OR;
terminal NOT;
terminal LT;
terminal RT;
terminal RTE;
terminal LTE;
terminal DIF;
terminal CS;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal ASSIGN; 
terminal FL;
terminal STEP; 
terminal TO;
terminal COM;
terminal COMA;
terminal MOD;
terminal CIR;
terminal ELSEIF;
terminal DOUN;
terminal STRD;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase for_stmt;
non terminal NodoBase do_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase dim_stmt;
non terminal NodoBase conj_var;
non terminal NodoBase print_stmt;
non terminal NodoBase input_stmt;
non terminal NodoBase conjunto;

/* Precedencia de operadores */
precedence left NOT;
precedence left AND;
precedence left OR;
precedence left COM;
precedence left LT;
precedence left LTE;
precedence left RT;
precedence left RTE;
precedence left DIF;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OVER;
precedence left CIR;
precedence left LPAREN;
precedence left RPAREN;

/* REGLAS GRAMATICALES */
program ::= 
    stmt_seq:s{:
        if(debug) 
            System.out.println("\t program ::= stmt_seq"); 
        ast = s;
    :}
    | stmt_seq:s END{: 
        if(debug) 
            System.out.println("\t program ::= stmt_seq END"); 
        ast = s;
    :}
    |ID {:
        if(debug) 
            System.out.println("\t program ::= ID"); 
    :}
    |  {:
        if(debug) 
            System.out.println("\t program ::= NADA"); 
    :}
    | error {: 
        if(debug)
            System.out.println("\t program ::= ERROR"); 
    :}
;

stmt_seq ::= 
    stmt_seq:ini FL stmt:sent{:
        if(debug) System.out.println("\t stmt_seq ::= stmt_seq FL stmt"); 
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
		}
		hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
    :}
    | assign_stmt:assig{:
        if(debug) 
            System.out.println("\t stmt_seq ::= stmt"); 
        RESULT=assig;
    :}
    | stmt:sent{: 
        if(debug) 
            System.out.println("\t stmt_seq ::= stmt"); 
        RESULT=sent;				
    :}
;

stmt ::= 
    print_stmt:sentencia {:
        if(debug) 
            System.out.println("\t stmt ::= print_stmt"); 
        RESULT = sentencia; 
    :}
    | dim_stmt:declaracion {:
        if(debug)
            System.out.println("\t stmt ::= dim_stmt"); 
        RESULT = declaracion;
    :}
    | if_stmt:sentif {:
        if(debug)
            System.out.println("\t stmt ::= if_stmt"); 
        RESULT = sentif;
    :}
;

print_stmt ::=
    PRINT COMILLAS:texto {:
        if(debug)
            System.out.println("\t print_stmt ::= PRINT COMILLAS"); 
        RESULT = new NodoImprimir(new NodoCadena(texto));
    :}
;

dim_stmt ::=
    DIM ID:var AS INT{: 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS INT"); 
        RESULT = new NodoDim(var);
    :}
    | DIM ID:var AS STRING{: 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS STRING"); 
        RESULT = new NodoDim(var);
    :} 
    | DIM ID:var AS DOU{: 
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID AS DOUBLE"); 
        RESULT = new NodoDim(var);
    :} 
    | DIM NUMP:var{:
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID INTEGER %"); 
        RESULT = new NodoDim((String) var);
    :}
    | DIM DOUN:var{:
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID DOUBLE #"); 
        RESULT = new NodoDim((String)var);
    :}
    | DIM STRD:var{:
        if(debug) 
            System.out.println("\t dim_stmt ::= DIM ID STRING $"); 
        RESULT = new NodoDim((String)var);
    :}
;

if_stmt ::=
    IF exp:cond THEN FL stmt_seq:pthen ENDIF{:
        if(debug) 
            System.out.println("\t if_stmt ::= IF exp THEN stmt_seq ENDIF"); 
        RESULT = new NodoIf(cond,pthen);
    :} 
;

assign_stmt ::= 
    ID:variable	ASSIGN exp:ex FL{: 
        if(debug) 
            System.out.println("\t assign_stmt ::= ID ASSIGN exp");
        if(variable!=null)
            RESULT = new NodoAsignacion(variable.toString(),ex);
        else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0001 assign_stmt ::= ID ASSIGN exp");
        }
    :}
;

exp ::=
    simple_exp:ex1 LT simple_exp:exD{:
        if(debug) 
            System.out.println("\t exp ::= simple_exp LT simple_exp"); 
        RESULT = ex1;
    :} 
    | simple_exp:exI RT simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp RT simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
    :}
    | simple_exp:exI LTE simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp LTE simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
    :} 
    | simple_exp:exI RTE simple_exp:exD	{:
        if(debug) 
            System.out.println("\t exp ::= simple_exp RTE simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);		
    :}
    | simple_exp:exI DIF simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp DIF simple_exp"); 
	RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);		
    :}
    | simple_exp:exI COM simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp COM simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.comparar,exD);
    :}
    | simple_exp:exI NOT simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp NOT simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.not,exD);
    :}
    | simple_exp:exI AND simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp AND simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.and,exD);
    :}
    | simple_exp:exI OR simple_exp:exD	{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp OR simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.or,exD);
    :}
    | simple_exp:ex{: 
        if(debug) 
            System.out.println("\t exp ::= simple_exp"); 
        RESULT = ex;
    :}
;

simple_exp  ::= 
    simple_exp:exI PLUS term:exD {:
        if(debug) 
            System.out.println("\t simple_exp ::= simple_exp + simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
    :}
    | simple_exp:exI MINUS term:exD{: 
        if(debug) 
            System.out.println("\t simple_exp ::= simple_exp - simple_exp"); 
        RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
    :}
    | term:ex	{: 
        if(debug) 
            System.out.println("\t simple_exp ::= term"); 
        RESULT=ex;
    :}
;

term ::= 
    term:exI TIMES factor:exD	{:
        if(debug) 
            System.out.println("\t term ::= term TIMES factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.por,exD);
    :}
    | term:exI OVER factor:exD	{: 
        if(debug) 
            System.out.println("\t term ::= term OVER factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
    :}
    | term:exI CIR factor:exD	{: 
        if(debug) 
            System.out.println("\t term ::= term CIR factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.potencia,exD);
    :}
    | term:exI MOD factor:exD	{: 
        if(debug) 
            System.out.println("\t term ::= term MOD factor"); 
        RESULT = new NodoOperacion(exI,tipoOp.modulo,exD);
    :}
    | factor:ex	{: 
        if(debug) 
            System.out.println("\t term ::= factor"); 
        RESULT=ex;
    :}
;

factor ::= 
    LPAREN exp:ex RPAREN{: 
        if(debug) 
            System.out.println("\t factor ::= LPAREN exp RPAREN"); 
        RESULT = ex;
    :}
    | NUM:valor	{: 
        if(debug) 
            System.out.println("\t factor ::= NUM"); 
        if(valor!=null){
            RESULT= new NodoValor(valor.toString());					
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= NUM");
        }
    :}
    | ID:variable{: 
        if(debug) 
            System.out.println("\t factor ::= ID"); 
        if(variable!=null){
            RESULT= new NodoIdentificador(variable.toString());		
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= ID");
        }
    :}
    | NUMP:variable{: 
        if(debug) 
            System.out.println("\t factor ::= NUMP");
        if(variable!=null){
            RESULT= new NodoIdentificador(variable.toString());		
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= NUMP");
        }
    :}
    | CADENA:var{: 
        if(debug) 
            System.out.println("\t factor ::= CADENA");
        if(var!=null){
            RESULT= new NodoValor(var.toString());					
        }else{
            RESULT = null;
            System.out.println("Ocurrio error en cup # 0005 factor ::= CADENA");
        }
    :}
;